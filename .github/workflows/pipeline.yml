name: CI Pipeline

on:
  workflow_call:

jobs:
  docker-tag:
    name: Check if 'latest' tag could be used (no build docker images)
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/docker-tag
        id: tag
        with:
          dockerfile: Jenkins/fast-release/Dockerfile.ci

  variants:
    name: Define supported AIMET variants
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.final.outputs.value }}
    steps:
      - name: Torch variants
        run: |
          VALUE=$(echo "${VALUE:-"{}"}" | jq -c '.include += [
              { "VER_PYTHON":"3.10", "VER_TENSORFLOW":"",       "VER_TORCH":"2.1.2", "VER_ONNX":"",        "VER_CUDA":"" },
              { "VER_PYTHON":"3.10", "VER_TENSORFLOW":"",       "VER_TORCH":"2.1.2", "VER_ONNX":"",        "VER_CUDA":"12.1.1" }
            ]')
          echo "VALUE=$VALUE" >> $GITHUB_ENV
      - name: Tensorflow variants
        run: |
          VALUE=$(echo "${VALUE:-"{}"}" | jq -c '.include += [
              { "VER_PYTHON":"3.10", "VER_TENSORFLOW":"2.10.1", "VER_TORCH":"",      "VER_ONNX":"",        "VER_CUDA":"" },
              { "VER_PYTHON":"3.10", "VER_TENSORFLOW":"2.10.1", "VER_TORCH":"",      "VER_ONNX":"",        "VER_CUDA":"11.8.0" }
            ]')
          echo "VALUE=$VALUE" >> $GITHUB_ENV
      - name: ONNX variants
        run: |
          VALUE=$(echo "${VALUE:-"{}"}" | jq -c '.include += [
              { "VER_PYTHON":"3.10", "VER_TENSORFLOW":"",       "VER_TORCH":"",      "VER_ONNX":"1.16.2", "VER_CUDA":""       },
              { "VER_PYTHON":"3.10", "VER_TENSORFLOW":"",       "VER_TORCH":"",      "VER_ONNX":"1.16.2", "VER_CUDA":"11.8.0" }
            ]')
          echo "VALUE=$VALUE" >> $GITHUB_ENV

      - name: (Last step) Generate few extra properties for each variant
        id: final
        run: |
          VALUE=$(echo "$VALUE" | jq -c '.include[] |= . + {
            "runs-on":(if .VER_CUDA != "" then "k8s-gpu" else "ubuntu-latest" end),
            "id":(""
                    +(if .VER_TENSORFLOW != "" then "tf-" else "" end)
                    +(if .VER_ONNX != "" then "onnx-" else "" end)
                    +(if .VER_TORCH != "" then "torch-" else "" end)
                    +(if .VER_CUDA != "" then "gpu" else "cpu" end)
                 )
            }')
          echo "value=$VALUE" >> $GITHUB_OUTPUT

  docker-build-image:
    name: Docker image ${{ matrix.id }}
    runs-on: ubuntu-latest
    needs: [docker-tag, variants]
    strategy:
      matrix: ${{ fromJSON(needs.variants.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/docker-build-image
        with:
          dockerfile: Jenkins/fast-release/Dockerfile.ci
          docker-login: ${{ secrets.DOCKER_LOGIN }}
          docker-password: ${{ secrets.DOCKER_CREDENTIALS }}
          docker-registry: ${{ vars.DOCKER_REGISTRY }}
          image-name: "${{ vars.DOCKER_IMAGE }}-${{ matrix.id }}"
          image-tag: ${{ needs.docker-tag.outputs.tag }}
          build-args: |
            VER_PYTHON=${{ matrix.VER_PYTHON }}
            VER_CUDA=${{ matrix.VER_CUDA }}
            VER_TORCH=${{ matrix.VER_TORCH }}
            VER_TENSORFLOW=${{ matrix.VER_TENSORFLOW }}
            VER_ONNX=${{ matrix.VER_ONNX }}

  build-wheel:
    name: Build AIMET wheels
    runs-on: ${{ matrix.runs-on }}
    needs: [docker-tag, variants, docker-build-image]
    strategy:
      matrix: ${{ fromJSON(needs.variants.outputs.matrix) }}
    defaults:
      run:
        shell: bash
    container:
      image: "${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_IMAGE }}-${{ matrix.id }}:${{ needs.docker-tag.outputs.tag }}"
      credentials:
        username: ${{ secrets.DOCKER_LOGIN }}
        password: ${{ secrets.DOCKER_CREDENTIALS }}
    steps:
      - uses: actions/checkout@v4
      - name: "Generate CMAKE_ARGS"
        run: |
          CMAKE_ARGS=""
          CMAKE_ARGS="-DENABLE_CUDA=$([ "${{ matrix.VER_CUDA }}" = "" ] && echo OFF || echo ON) $CMAKE_ARGS"
          CMAKE_ARGS="-DENABLE_TORCH=$([ "${{ matrix.VER_TORCH }}" = "" ] && echo OFF || echo ON) $CMAKE_ARGS"
          CMAKE_ARGS="-DENABLE_ONNX=$([ "${{ matrix.VER_ONNX }}" = "" ] && echo OFF || echo ON) $CMAKE_ARGS"
          CMAKE_ARGS="-DENABLE_TENSORFLOW=$([ "${{ matrix.VER_TENSORFLOW }}" = "" ] && echo OFF || echo ON) $CMAKE_ARGS"
          echo "AIMET_CMAKE_ARGS=$CMAKE_ARGS" >> $GITHUB_ENV
      - name: "Exclude Torch libraries from dependencies for manylinux"
        if: matrix.VER_TORCH || matrix.VER_ONNX
        run: |
          . /etc/profile.d/conda.sh
          TORCH_DIR=$(python3 -c 'import torch; print(f"{torch.utils.cmake_prefix_path}/../../lib")')
          MANYLINUX_EXCLUDE_LIBS="$MANYLINUX_EXCLUDE_LIBS $(find $TORCH_DIR -name '*.so*' | xargs -r patchelf --print-soname | xargs -r printf -- '--exclude %s ')"
          set -x
          echo "MANYLINUX_EXCLUDE_LIBS=$MANYLINUX_EXCLUDE_LIBS" >> $GITHUB_ENV
      - name: "Exclude CUDA libraries from dependencies for manylinux"
        if: matrix.VER_CUDA
        run: |
          . /etc/profile.d/conda.sh
          CUBLAS_DIR=$(python3 -c 'import sysconfig ; from pathlib import Path; print(Path(sysconfig.get_config_var("prefix"), "lib"))')
          MANYLINUX_EXCLUDE_LIBS="$MANYLINUX_EXCLUDE_LIBS $(find $CUBLAS_DIR -name '*blas.so*' | xargs -r patchelf --print-soname | xargs -r printf -- '--exclude %s ')"
          set -x
          echo "MANYLINUX_EXCLUDE_LIBS=$MANYLINUX_EXCLUDE_LIBS" >> $GITHUB_ENV
      - name: "Exclude Tensorflow libraries from dependencies for manylinux"
        if: matrix.VER_TENSORFLOW
        run: |
          . /etc/profile.d/conda.sh
          TF_DIR=$(python3 -c 'import tensorflow as tf; print(tf.sysconfig.get_lib())')
          CUBLAS_DIR=$(python3 -c 'import tensorflow as tf; print(f"{tf.sysconfig.get_lib()}/../../../../lib")')
          MANYLINUX_EXCLUDE_LIBS="$MANYLINUX_EXCLUDE_LIBS $(find $TF_DIR -name '*.so*' | xargs -r patchelf --print-soname | xargs -r printf --  '--exclude %s ')"
          MANYLINUX_EXCLUDE_LIBS="$MANYLINUX_EXCLUDE_LIBS $(find $CUBLAS_DIR -name '*blas.so*' | xargs -r patchelf --print-soname | xargs -r printf -- '--exclude %s ')"
          set -x
          echo "MANYLINUX_EXCLUDE_LIBS=$MANYLINUX_EXCLUDE_LIBS" >> $GITHUB_ENV
      - name: "Build AIMET wheel package"
        run: |
          rm -rf build dist
          . /etc/profile.d/conda.sh
          export CMAKE_ARGS="$AIMET_CMAKE_ARGS"
          python3 -m build --wheel --no-isolation .
          auditwheel repair --plat manylinux_2_34_x86_64 $MANYLINUX_EXCLUDE_LIBS dist/aimet*.whl
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.id }}"
          path: "wheelhouse/aimet*.whl"
          if-no-files-found: error
          retention-days: 1d

  test:
    name: Run AIMET unit tests
    runs-on: ${{ matrix.runs-on }}
    needs: [variants, build-wheel]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.variants.outputs.matrix) }}
    env:
      pytest_github_report: true
      pytest_use_zeros: true
    container:
      image: "ubuntu:22.04"
    steps:
      - run: |
          apt update -qq
          apt install --no-install-recommends -y git curl g++ ca-certificates
          curl -sSL 'https://pki.qualcomm.com/{qc_root_g2_cert.crt,ssl_v3_cert.crt,ssl_v4_cert.crt}' > qualcomm.crt
          update-ca-certificates
          rm -rf wheelhouse
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: "${{ matrix.id }}"
          path: "wheelhouse"
      - name: Try to load python virtual environment from the cache
        uses: actions/cache@v4
        id: cache
        with:
          path: ./.conda
          key: ${{ matrix.id }}-${{ hashFiles('pyproject.toml', 'packaging/dependencies/**/*.txt', 'packaging/dependencies/plugins/**/*.py') }}
      - name: Create python virtual environment
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "\
          torch$([ -n "${{ matrix.VER_TORCH }}" ] && echo "==${{ matrix.VER_TORCH }}")\n\
          tensorflow-cpu$([ -n "${{ matrix.VER_TENSORFLOW }}" ] && echo "==${{ matrix.VER_TENSORFLOW }}")\n\
          tensorflow-gpu$([ -n "${{ matrix.VER_TENSORFLOW }}" ] && echo "==${{ matrix.VER_TENSORFLOW }}")\n\
          onnx$([ -n "${{ matrix.VER_ONNX }}" ] && echo "==${{ matrix.VER_ONNX }}") \
          " > /tmp/constraints.txt

          export PIP_EXTRA_INDEX_URL="https://download.pytorch.org/whl/$(echo "${{ matrix.VER_CUDA }}" | awk -F'.' '{print ($1!="")? "cu"$1$2 : "cpu"}')"

          curl -o ./conda.sh -L 'https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh'
          bash ./conda.sh -u -b -p ./.conda
          sudo apt update -qq && sudo apt install -y g++ # deepspeed compiles cuda kernels
          ./.conda/bin/conda create --name "${{ matrix.id }}" python="${{ matrix.VER_PYTHON }}" $([ "${{ matrix.VER_CUDA }}" != "" ] && echo "cuda-runtime cuda-libraries-dev cuda-compiler --channel nvidia/label/cuda-${{ matrix.VER_CUDA }}")
          ./.conda/bin/conda run --live-stream --name "${{ matrix.id }}" python3 -m pip install --constraint=/tmp/constraints.txt "$(find wheelhouse -name '*.whl')[test]"
      - name: Run pylint
        run: |
          CONDA_PYTHONPATH="./.conda/envs/${{ matrix.id }}/lib/python${{ matrix.VER_PYTHON }}/site-packages"
          AIMET_PACKAGES=$(find $CONDA_PYTHONPATH -regex ".*/aimet_\(common\|torch\|tensorflow\|onnx\)" | tr "\n" " ")

          ./.conda/bin/conda run --live-stream --name "${{ matrix.id }}" \
              python3 -m pylint --rcfile=.pylintrc $AIMET_PACKAGES
      - name: Run unit tests
        run: |
          TEST_DIR=""
          if [ "${{ matrix.VER_TENSORFLOW }}" != "" ] ; then
              TEST_DIR="$TEST_DIR ./TrainingExtensions/tensorflow/test"
          elif [ "${{ matrix.VER_ONNX }}" != "" ] ; then
              TEST_DIR="$TEST_DIR ./TrainingExtensions/onnx/test"
          elif [ "${{ matrix.VER_TORCH }}" != "" ] ; then
              TEST_DIR="$TEST_DIR ./TrainingExtensions/torch/test"
          fi
          TEST_ARGS=""
          if [ "${{ matrix.VER_CUDA }}" == "" ] ; then
              TEST_ARGS="$TEST_ARGS -m \"not cuda\""
          fi
          ./.conda/bin/conda run --live-stream --name "${{ matrix.id }}" python3 -m pytest $TEST_ARGS  $TEST_DIR

  docker-push-latest:
    needs: [docker-tag, variants, test]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.variants.outputs.matrix) }}
    steps:
      - run: sudo sh -c "cp /tmp/certs/* /usr/local/share/ca-certificates/ && update-ca-certificates"
      - uses: docker/setup-buildx-action@v3
        with:
          driver: docker
      - uses: docker/login-action@v3
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_CREDENTIALS }}
      - name: Create the 'latest' docker image tag
        if: ${{ github.ref_name == github.event.repository.default_branch && needs.docker-tag.outputs.tag != 'latest' }}
        run: docker buildx imagetools create ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_IMAGE }}-${{ matrix.id }}:${{ needs.docker-tag.outputs.tag }} --tag ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_IMAGE }}-${{ matrix.id }}:latest

  cleanup:
    needs: [docker-tag, variants, docker-push-latest]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.variants.outputs.matrix) }}
    steps:
      - name: Delete temp docker image
        if: needs.docker-tag.outputs.tag != 'latest'
        run: curl -k -H "Authorization:Bearer ${{ secrets.DOCKER_CREDENTIALS }}" -X DELETE "https://${{ vars.DOCKER_REGISTRY }}/v2/${{ vars.DOCKER_IMAGE }}-${{ matrix.id }}/manifests/${{ needs.docker-tag.outputs.tag }}" || true
